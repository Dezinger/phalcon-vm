#!/usr/bin/env bash

# Get root folder
DIR="$( dirname $( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd ) )"

# If we have tput, let's set our colors
if [[ ! -z $(which tput 2>/dev/null) ]]; then
	normal=$(tput sgr0)
	bold=$(tput bold)
	red=$(tput setaf 1)
	green=$(tput setaf 2)
	yellow=$(tput setaf 3)
	magenta=$(tput setaf 5)
	cyan=$(tput setaf 6)
fi

__prompt() {
	printf "%b" "${magenta} $1: ${normal}"
}

__warning() {
	printf "%b" "${red} $1 ${normal}\n"
}

__error() {
    printf "%b" "[${bold}${red}Error${normal}]${bold}${red} ${1:-'Unknown Error'}${normal}\n" >&2
}

__info() {
	printf "%b" "${bold}${yellow}$1${normal} \n"
}


__vagrant_is_running() {
	local is_running
	is_running="true"
	vagrant global-status | grep "$DIR\s*"'$' | grep -q running || is_running="false"
	echo "$is_running"
}

__vagrant_maybe_halt() {
	local is_running
	is_running=$(__vagrant_is_running)
	if [[ "$is_running" = "true" ]]; then
		__info "Running \`vagrant halt\`"
		vagrant halt
	else
		__info "Vagrant not running, skipping \`vagrant halt\`..."
	fi
}

__vagrant_up() {
	__info "Running vagrant up --provision... "
	cd "$DIR"
	vagrant up --provision
}

__direcotry() {
	while [ -z "$site" ]; do
		__prompt "Name of new site directory"
		read -r site

		if [ -z "$site" ]; then
			__error "You must enter a directory name."
		elif [ -f "$path/config/nginx-config/sites/$site.conf" ]; then
			__error "Site $site already exists. Remove config/nginx-config/sites/$site.conf to run setup again."
			unset site
		elif [ -d "$DIR/www/$site" ]; then
			__warning "Directory $DIR/www/$site already exists. Existing files will be overwritten."
		fi
	done

	if [ ! -d "$DIR/www/$site" ]; then
		mkdir "$DIR/www/$site"
	fi
}

__domain() {
	while [ -z "$domain" ]; do
		__prompt "Space separated domains to use (leave blank for ${site// /-}.dev)"
		read -r domain

		if [ -z "$domain" ]; then
			domain="${site// /-}.dev"
		fi
	done

	__info "Adding $domain to new pahlcon-hosts file... "
	echo "$domain" > "$DIR/www/$site/phalcon-hosts"

	__info "Creating nginx-config/sites/$site.conf... "
	cd $DIR/config/nginx-config/sites
	sed -e "s/testserver\.com/$domain/" \
		-e "s|/srv/www/testserver|/srv/www/$site/htdocs/public|" local-nginx-example.conf-sample > "$site".conf
}

__site() {
	__prompt "Git repo to clone (leave blank to skip)"
	read -r git_repo

	if [ ! -z "$git_repo" ]; then
		git clone --recursive "$git_repo" $DIR/www/$site/htdocs
	else
		mkdir -p "$DIR/www/$site/htdocs/public"
		touch "$DIR/www/$site/htdocs/public/index.php"
		cat <<EOF > "$DIR/www/$site/htdocs/public/index.php"
<?php

echo '<h1>', ucfirst( "$site" ), ' has been created.</h1>';
echo 'Please, use <a href="https://docs.phalconphp.com/en/latest/reference/tools.html">Phalcon Dev Tool</a> to generate project skeleton.';
EOF
	fi
}

__main() {
	__direcotry
	__domain
	__site
	__vagrant_maybe_halt
	__vagrant_up
}

__main
